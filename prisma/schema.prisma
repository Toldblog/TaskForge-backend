generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int               @id @unique @default(autoincrement())
  username             String            @unique
  email                String            @unique
  name                 String
  password             String?
  passwordConfirm      String?
  bio                  String?
  changePasswordAt     DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  active               Boolean           @default(false)
  avatar               String?
  role                 Role              @default(USER)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  boardMembers         BoardMember[]
  ownBoards            Board[]
  cardActivities       CardActivity[]
  cardAssignees        CardAssignee[]
  comments             Comment[]
  messages             messages[]
  receiveNotifications Notification[]    @relation("receive_notification")
  sendNotifications    Notification[]    @relation("send_notification")
  workspaceMembers     WorkspaceMember[]

  @@map("users")
}

model Workspace {
  id               Int               @id @unique @default(autoincrement())
  name             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  adminIds         Int[]
  inviteToken      String?
  description      String?
  boards           Board[]
  notifications    Notification[]
  workspaceMembers WorkspaceMember[]

  @@map("workspaces")
}

model WorkspaceMember {
  userId      Int
  workspaceId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@id([userId, workspaceId])
  @@map("workspace_member")
}

model Template {
  id                Int      @id @unique @default(autoincrement())
  defaultList       String[] @default(["To do", "In progress", "Done"])
  defaultBackground String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  boards            Board[]

  @@map("templates")
}

model Board {
  id            Int            @id @unique @default(autoincrement())
  name          String
  background    String
  visibility    Boolean        @default(true)
  closed        Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creatorId     Int
  workspaceId   Int
  templateId    Int
  inviteToken   String?
  listsOrder    Int[]          @default([])
  boardMembers  BoardMember[]
  creator       User           @relation(fields: [creatorId], references: [id])
  template      Template       @relation(fields: [templateId], references: [id])
  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  lists         List[]
  messages      messages[]
  notifications Notification[]

  @@map("boards")
}

model BoardMember {
  userId           Int
  boardId          Int
  starred          Boolean   @default(false)
  viewRecentlyDate DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  board            Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, boardId])
  @@map("board_member")
}

model List {
  id         Int      @id @unique @default(autoincrement())
  name       String
  boardId    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cardsOrder Int[]    @default([])
  cards      Card[]
  board      Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@map("lists")
}

model Card {
  id              Int              @id @unique @default(autoincrement())
  title           String
  description     String?
  active          Boolean          @default(true)
  dueDate         DateTime?
  reminderDate    DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  listId          Int
  cardActivities  CardActivity[]
  cardAssignees   CardAssignee[]
  cardAttachments CardAttachment[]
  list            List             @relation(fields: [listId], references: [id], onDelete: Cascade)
  comments        Comment[]
  notifications   Notification[]

  @@map("cards")
}

model CardAssignee {
  assigneeId Int
  cardId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  assignee   User     @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
  card       Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@id([assigneeId, cardId])
  @@map("card_assignee")
}

model CardAttachment {
  id         Int            @id @unique @default(autoincrement())
  uploadDate DateTime
  fileName   String
  url        String
  type       AttachmentType @default(FILE)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  cardId     Int
  card       Card           @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("card_attachment")
}

model Comment {
  id        Int      @id @unique @default(autoincrement())
  content   String
  userId    Int
  cardId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  commenter User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model CardActivity {
  id        Int      @id @unique @default(autoincrement())
  activity  String
  userId    Int
  cardId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("card_activity")
}

model Notification {
  id          Int              @id @unique @default(autoincrement())
  type        NotificationType @default(ASSIGNMENT)
  senderId    Int
  receiverId  Int
  workspaceId Int?
  cardId      Int?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  boardId     Int?
  board       Board?           @relation(fields: [boardId], references: [id])
  card        Card?            @relation(fields: [cardId], references: [id])
  receiver    User             @relation("receive_notification", fields: [receiverId], references: [id])
  sender      User             @relation("send_notification", fields: [senderId], references: [id])
  workspace   Workspace?       @relation(fields: [workspaceId], references: [id])

  @@map("notifications")
}

model messages {
  id        Int      @id @unique @default(autoincrement())
  content   String
  userId    Int
  boardId   Int
  createdAt DateTime @default(now())
  boards    Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum AttachmentType {
  FILE
  LINK
}

enum NotificationType {
  ADD_ADMIN
  REMOVE
  ASSIGNMENT
  COMMENT
  ADD_TO_BOARD
}
