generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                   Int       @id @unique @default(autoincrement())
  username             String    @unique
  email                String    @unique
  name                 String
  password             String?
  passwordConfirm      String?
  bio                  String?
  changePasswordAt     DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  active               Boolean   @default(false)
  avatar               String?
  role                 Role      @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaceMembers     WorkspaceMember[]
  boardMembers         BoardMember[]
  comments             Comment[]
  cardActivities       CardActivity[]
  sendNotifications    Notification[]    @relation("send_notification")
  receiveNotifications Notification[]    @relation("receive_notification")
  cardAssignees        CardAssignee[]
  ownBoards            Board[]

  @@map("users")
}

model Workspace {
  id          Int     @id @unique @default(autoincrement())
  name        String
  description String?
  inviteToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminIds Int[]

  workspaceMembers WorkspaceMember[]
  boards           Board[]
  notifications    Notification[]

  @@map("workspaces")
}

model WorkspaceMember {
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, workspaceId])
  @@map("workspace_member")
}

model Template {
  id                Int      @id @unique @default(autoincrement())
  defaultList       String[] @default(["To do", "In progress", "Done"])
  defaultBackground String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boards Board[]

  @@map("templates")
}

model Board {
  id         Int     @id @unique @default(autoincrement())
  name       String
  background String
  visibility Boolean @default(true) //True: visible in workspace, False: only member in board can see
  closed     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creatorId   Int
  creator     User      @relation(fields: [creatorId], references: [id])
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  templateId  Int
  template    Template  @relation(fields: [templateId], references: [id])

  inviteToken String?

  boardMembers  BoardMember[]
  lists         List[]
  notifications Notification[]

  @@map("boards")
}

model BoardMember {
  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  boardId Int
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  starred          Boolean   @default(false)
  viewRecentlyDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, boardId])
  @@map("board_member")
}

model List {
  id              Int    @id @unique @default(autoincrement())
  name            String
  positionInBoard Int

  boardId Int
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cards Card[]

  @@map("lists")
}

model Card {
  id           Int       @id @unique @default(autoincrement())
  title        String
  description  String?
  active       Boolean   @default(true)
  dueDate      DateTime?
  reminderDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listId Int
  list   List @relation(fields: [listId], references: [id], onDelete: Cascade)

  cardAttachments CardAttachment[]
  comments        Comment[]
  cardActivities  CardActivity[]
  notifications   Notification[]
  cardAssignees   CardAssignee[]

  @@map("cards")
}

model CardAssignee {
  assigneeId Int
  assignee   User @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
  cardId     Int
  card       Card @relation(fields: [cardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([assigneeId, cardId])
  @@map("card_assignee")
}

enum AttachmentType {
  FILE
  LINK
}

model CardAttachment {
  id         Int            @id @unique @default(autoincrement())
  uploadDate DateTime
  fileName   String
  url        String
  type       AttachmentType @default(FILE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cardId Int
  card   Card @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("card_attachment")
}

model Comment {
  id      Int    @id @unique @default(autoincrement())
  content String

  userId    Int
  commenter User @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardId    Int
  card      Card @relation(fields: [cardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model CardActivity {
  id       Int    @id @unique @default(autoincrement())
  activity String

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardId Int
  card   Card @relation(fields: [cardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("card_activity")
}

enum NotificationType {
  ADD_ADMIN
  REMOVE
  ASSIGNMENT
  COMMENT
  ADD_TO_BOARD
}

model Notification {
  id   Int              @id @unique @default(autoincrement())
  type NotificationType @default(ASSIGNMENT)

  senderId    Int
  sender      User       @relation(name: "send_notification", fields: [senderId], references: [id])
  receiverId  Int
  receiver    User       @relation(name: "receive_notification", fields: [receiverId], references: [id])
  workspaceId Int?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  boardId     Int?
  board       Board?     @relation(fields: [boardId], references: [id])
  cardId      Int?
  card        Card?      @relation(fields: [cardId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}
